-- üìå –°–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
local validKeys = {
    "XbR9fZx2VjC3wD5k",
    "HtY1gLs9N0e7JqFp",
    "Dm5K2zVgQzZ0Iu4a",
    "OeL1dN3Xk8TtMbJr",
    "YpQ8VhR7Fi2N6mG4C",
    "Z4xBd2z5gO9MwJtP",
    "TnV2wFxK7Cz0Hk8U",
    "JfP9D8RkTzLwE5n1q",
    "Bv1XzM6Nz9L2JtFw",
    "GzC7TiO5p0Fw4k3X",
    "Wb3Hz6YdP2kLz7Jq",
    "R9Xs5fKi7B0cV3nW",
    "D8GpJ4m5V6kLtHzT",
    "M2Qd0FbPz8LxK1V9",
    "C0J6pLsR8kF3m5Vn",
    "Ht3A7zF5rP9VkLz2",
    "ZxX7B3tV5pLd2n0K",
    "Q4Vz1X5m8T0Fw9Jp",
    "K6y0D5fX9Zg7JmLn",
    "U2tB9F8p5C0wK3jZ",
    "Q2pY6wK4LzX7V8gM",
    "X1t0LgB3Pz9F7Cm6",
    "V7Y8sF0aN2K9mX5b",
    "J3z0FwQ6D9VpL2R5",
    "K0X1mD8V2gF9s7zT",
    "F6L3p5R9zK0YwVm1",
    "J4n7L8kV3x2FwQ0T",
    "T5Q0V2D3K9nLzFwX",
    "Zx5B0g8J1yR2p3N7",
    "P1tZ9L4xV7Y0kF3m",
    "B0mF2R6V1x7Qn8Ls",
    "F7wK5pX2t9Y0nL3Z",
    "Y3L8gD9V0F1tQ5X7",
    "Z5F2X0q9L6k8p7B1",
    "G2L9B0V5pX1F7w4N",
    "R7Y0t5L3Q2K8X9V1",
    "J5z3V0K9Y2wT7L1P",
    "X8F0p9B1N7tL2Y6v",
    "K6J5T2m8X1V9FwL0",
    "D4Z9L1X0V2T5p6mJ",
    "L1Y7Z3Q0V5B2kF9X",
    "P6X7g5V2D0K1L8T3",
    "T2Y9X0m5V7K3L1Fw",
    "B8g5V6Y0L1t9J3N2",
    "K1J9X3V2p5L8Fw0m",
    "Q5X0t6L7V9B3m2Y1",
    "D8F5V9L3p0X1k7T2",
    "L9V0J2m8Q1F5X6B7",
    "F4Y0V5m7B9L2X3kT",
    "J6tX2V5Y0B8K7n9L"
}

-- üìå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤–≤–æ–¥–∞ –∫–ª—é—á–∞
local script_key = "B0mF2R6V1x7Qn8Ls"  -- –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–ª—é—á, –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∏–≥—Ä–æ–∫–æ–º –≤ –∫–æ–Ω—Å–æ–ª–∏

-- üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞
local function checkKey(inputKey)
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª—é—á –≤ —Å–ø–∏—Å–∫–µ –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–ª—é—á–µ–π
    for _, key in ipairs(validKeys) do
        if inputKey == key then
            return true  -- –ö–ª—é—á –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        end
    end
    return false  -- –ö–ª—é—á –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
end

-- üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
local function runScript()
    -- –ó–¥–µ—Å—å –∏–¥–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ —Å–∫—Ä–∏–ø—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–æ—Å–ª–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
    print("–ö–ª—é—á –ø—Ä–∏–Ω—è—Ç! –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")
end

-- üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
if checkKey(script_key) then
    runScript()
else
    print("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á! –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞.")
    game.Players.LocalPlayer:Kick("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á! –í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞.")  -- –ö–∏–∫–∞–µ–º –∏–≥—Ä–æ–∫–∞ —Å –æ—à–∏–±–∫–æ–π
    return
end

-- üìå –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã Roblox
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")

-- üìå –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ç–µ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
local Network = ReplicatedStorage:WaitForChild("Network", 10)
if not Network then
    return warn("‚ùå Network –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–∫—Ä–∏–ø—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω.") 
end

-- üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
local function runAsync(func)
    task.spawn(func)
end

-- üìå –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
local function invokeRemoteEvent(remoteName, args)
    local remoteEvent = Network:FindFirstChild(remoteName)
    if not remoteEvent then return warn("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω RemoteEvent '" .. remoteName .. "'") end
    local success, result = pcall(function()
        return remoteEvent:InvokeServer(unpack(args))
    end)
    return success, result
end

-- üìå –ê–≤—Ç–æ-–ø–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ vending machine
local function autoPurchaseVendingMachine()
    while task.wait() do
        local args = { [1] = "PotionVendingMachine" }
        local success, result = invokeRemoteEvent("VendingMachines_Purchase", args)
        if not success then
            warn("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∏–∑ vending machine:", result)
        end
    end
end

-- üìå –ê–≤—Ç–æ-—Ä–æ–ª–ª —è–∏—Ü (—Å–ø–∞–º–∏–º 10 —Ä–æ–ª–ª–æ–≤ –∑–∞ —Ç–∏–∫)
local function autoRollEggs()
    while task.wait() do
        for i = 1, 10 do
            invokeRemoteEvent("Eggs_Roll", {})
        end
    end
end

-- üìå –ê–≤—Ç–æ-–≤—ã—Å–∏–∂–∏–≤–∞–Ω–∏–µ —è–∏—Ü
local function autoHatchEggs()
    while task.wait(0.1) do
        invokeRemoteEvent("Tycoons: Hatch", {})
    end
end

-- üìå –ê–≤—Ç–æ-—Å–±–æ—Ä —è–∏—Ü
local function autoCollectEggs()
    local eggNames = { "TierOneEgg", "TierTwoEgg", "TierThreeEgg", "TierFourEgg", "TierFiveEgg", "TierSixEgg", "TierSevenEgg", "TierEightEgg" }
    local dropperClaimEvent = Network:FindFirstChild("Tycoons: Dropper Claim")
    if not dropperClaimEvent then return warn("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω RemoteEvent 'Tycoons: Dropper Claim'.") end

    while task.wait(0.05) do
        local debrisFolder = Workspace:FindFirstChild("__DEBRIS")
        if not debrisFolder then continue end

        local character = LocalPlayer.Character
        local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
        if not humanoidRootPart then continue end

        for _, egg in ipairs(debrisFolder:GetChildren()) do
            if table.find(eggNames, egg.Name) then
                local eggPart = egg:FindFirstChild("Handle") or egg
                if eggPart then
                    eggPart.CanCollide = false
                    eggPart.Anchored = true
                end

                egg.Parent = character
                egg.Position = humanoidRootPart.Position + Vector3.new(0, -2, 0)

                local success, result = pcall(function()
                    return dropperClaimEvent:InvokeServer(egg)
                end)

                if success and result then
                    egg:Destroy()
                end
            end
        end
    end
end

-- üìå –°–ø–∏—Å–æ–∫ ID —Ñ—Ä—É–∫—Ç–æ–≤ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–ø–≥—Ä–µ–π–¥–∞
local fruitUpgradeValues = {
    ["81056d1e79ae444f91530ff0769da1c7"] = 25,
    ["ad24b8d3629d43e8b7042d0e617d6627"] = 25,
    ["2b44f53844484311b16a48be956e8cf5"] = 25,
    ["8e37346203ab46b192aa1956ee72c0be"] = 25,
    ["8e2a9935f66e4fa58b30dd58f2ec897e"] = 25,
    ["ea4c2220b51e4b87892d33da12df9ffe"] = 25,
    ["0e0e52fda5344330a0c5244d3f11b89d"] = 25,
    ["00b223c98c914eef8fd2b0b5ddfb3301"] = 25,
    ["5d6d82b5d6224fb1a9c419a96ec7e785"] = 25,
    ["11ba838264664919951968639ba4bb0f"] = 25,
    ["f15d965528a24b79a7d3e4dc274f8af5"] = 25
}

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–ø–≥—Ä–µ–π–¥–∞ —Ñ—Ä—É–∫—Ç–æ–≤
local function upgradeFruits()
    for fruitID, value in pairs(fruitUpgradeValues) do
        -- –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–ø–≥—Ä–µ–π–¥–∞
        local args = {
            [1] = { [fruitID] = value },  -- ID —Ñ—Ä—É–∫—Ç–∞ –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
            [2] = true,                   -- –í—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true)
        }

        -- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–ø–≥—Ä–µ–π–¥–∞
        game:GetService("ReplicatedStorage").Network["UpgradeFruitsMachine_Activate"]:InvokeServer(unpack(args))

        -- –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∞–ø–≥—Ä–µ–π–¥–æ–º
        wait(1)  -- –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞
    end
end

-- –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–ø–≥—Ä–µ–π–¥–æ–≤ —Ñ—Ä—É–∫—Ç–æ–≤
while true do
    upgradeFruits()  -- –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–ø–≥—Ä–µ–π–¥ —Ñ—Ä—É–∫—Ç–æ–≤
    wait(5)          -- –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
end

-- –°–ø–∏—Å–æ–∫ ID —Ñ—Ä—É–∫—Ç–æ–≤
local fruits = {
    "1625a83c4ea74364b73b2298a2cb95fa", 
    "868ab27f1b6e4f62b5cc88bb500e20cd",
    "705d3c4ca9a84296bd57ac592bbc797e", 
    "a52de87711334ef19af29bb145264cc7",
    "a5cc2c890e2a43e3973d7242322de52b", 
    "f7e96e538890449e95bda98a569b47e2",
    "ea4c2220b51e4b87892d33da12df9ffe",
    "0e0e52fda5344330a0c5244d3f11b89d",
    "00b223c98c914eef8fd2b0b5ddfb3301",
    "5d6d82b5d6224fb1a9c419a96ec7e785",
    "11ba838264664919951968639ba4bb0f",
    "f15d965528a24b79a7d3e4dc274f8af5"
}

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—Ä—É–∫—Ç–æ–≤
local function useFruits()
    for _, fruitID in ipairs(fruits) do
        -- –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—Ä—É–∫—Ç–∞
        local args = {
            [1] = fruitID,  -- ID —Ñ—Ä—É–∫—Ç–∞
            [2] = 1,        -- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é 1)
        }

        -- –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—Ä—É–∫—Ç–∞
        game:GetService("ReplicatedStorage").Network["Fruits: Consume"]:InvokeServer(unpack(args))

        -- –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ—Ä—É–∫—Ç–æ–≤
        wait(0.01)  -- –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞
    end
end

-- –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—Ä—É–∫—Ç–æ–≤
while true do
    useFruits()  -- –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Ñ—Ä—É–∫—Ç—ã
    wait(1)      -- –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
end

-- üìå **–ê–≤—Ç–æ-–ø–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤**
local merchants = { "StandardMerchant", "MiningMerchant", "FishingMerchant", "IceFishingMerchant", "FactoryMerchant" }
local soldOutItems = {}

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø—Ä–æ–¥–∞–Ω –ª–∏ —Ç–æ–≤–∞—Ä
local function isItemSoldOut(merchant, slot)
    return soldOutItems[merchant] and soldOutItems[merchant][slot] or false
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ —É —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤
local function purchaseFromMerchants()
    while true do
        local allSoldOut = true
        for _, merchantName in ipairs(merchants) do
            for slot = 1, 8 do
                -- –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                if isItemSoldOut(merchantName, slot) then
                    -- –ò—Å–ø–æ–ª—å–∑—É–µ–º break –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ—Ç—É
                    break
                end

                -- –ü—ã—Ç–∞–µ–º—Å—è –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä
                local args = { [1] = merchantName, [2] = slot }
                local success, result = pcall(function()
                    -- –ò—Å–ø–æ–ª—å–∑—É–µ–º InvokeServer –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞ —É –º–µ—Ä—á–∞–Ω—Ç–∞
                    return game:GetService("ReplicatedStorage").Network["CustomMerchants_Purchase"]:InvokeServer(unpack(args))
                end)

                if success then
                    allSoldOut = false
                else
                    warn("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —É " .. merchantName .. " —Å–ª–æ—Ç " .. slot .. ": " .. result)
                    soldOutItems[merchantName] = soldOutItems[merchantName] or {}
                    soldOutItems[merchantName][slot] = true
                end

                -- –û–∂–∏–¥–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                task.wait(0.3)
            end
        end

        -- –ï—Å–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–¥–∞–Ω—ã, –∂–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –∏ –æ—á–∏—â–∞–µ–º soldOutItems
        if allSoldOut then
            task.wait(10)
            soldOutItems = {} -- –û—á–∏—â–∞–µ–º soldOutItems —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        end
    end
end

-- –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫—É–ø–æ–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
spawn(purchaseFromMerchants)
